{"version":3,"sources":["FirebaseApp.js","components/SignInCard.js","components/HomeAppBar.js","pages/Home.js","serviceWorker.js","index.js"],"names":["FirebaseApp","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Transition","React","forwardRef","props","ref","Slide","direction","SignInCard","onClose","open","uiConfig","signInOptions","firebase","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","callbacks","signInSuccessWithAuthResult","Dialog","fullWidth","TransitionComponent","AppBar","Toolbar","IconButton","edge","color","onClick","aria-label","Close","DialogTitle","firebaseAuth","useStyles","makeStyles","theme","appBar","zIndex","drawer","grow","flexGrow","sectionDesktop","display","breakpoints","up","sectionMobile","HomeAppBar","user","currentUser","useState","messageCount","notificationCount","loginPage","setLoginPage","drawerState","setDrawerState","toggleDrawer","event","type","key","classes","userMenuAnchor","setUserMenuAnchor","isUserMenuOpen","Boolean","handleUserMenuOpen","currentTarget","handleUserMenuClose","userMenu","Menu","id","anchorEl","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","Table","TableBody","MenuItem","TableRow","TableCell","Avatar","src","photoURL","displayName","colors","white","ExitToApp","Badge","Message","Notifications","position","className","AccountCircle","badgeContent","aria-controls","aria-haspopup","MoreVert","SwipeableDrawer","anchor","onOpen","Home","state","componentDidMount","onAuthStateChanged","userAuth","setState","Component","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7138f67b.chunk.js","sourcesContent":["import { initializeApp } from \"firebase\";\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyCCnr1bgNgAv9O7Pn19twDRvNyPAU7ctLg\",\r\n  authDomain: \"farmer-help-6.firebaseapp.com\",\r\n  databaseURL: \"https://farmer-help-6.firebaseio.com\",\r\n  projectId: \"farmer-help-6\",\r\n  storageBucket: \"farmer-help-6.appspot.com\",\r\n  messagingSenderId: \"924281053135\",\r\n  appId: \"1:924281053135:web:044ee4280481b4ab433cba\",\r\n  measurementId: \"G-JCF9P7LMRH\",\r\n};\r\nconst FirebaseApp = initializeApp(firebaseConfig);\r\nexport default FirebaseApp;\r\n","import {\r\n  Dialog,\r\n  DialogTitle,\r\n  IconButton,\r\n  AppBar,\r\n  Toolbar,\r\n  Slide,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport firebase from \"firebase\";\r\nimport { StyledFirebaseAuth } from \"react-firebaseui\";\r\nimport FirebaseApp from \"../FirebaseApp\";\r\nimport { Close } from \"@material-ui/icons\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\nexport default function SignInCard(props) {\r\n  const { onClose, open } = props;\r\n  const uiConfig = {\r\n    signInOptions: [\r\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\r\n      firebase.auth.FacebookAuthProvider.PROVIDER_ID,\r\n    ],\r\n    callbacks: {\r\n      signInSuccessWithAuthResult: () => false,\r\n    },\r\n  };\r\n  const handleClose = () => {\r\n    onClose();\r\n  };\r\n  return (\r\n    <Dialog fullWidth TransitionComponent={Transition} open={open}>\r\n      <AppBar>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            onClick={handleClose}\r\n            aria-label=\"close\"\r\n          >\r\n            <Close />\r\n          </IconButton>\r\n          <DialogTitle>Sign In</DialogTitle>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <StyledFirebaseAuth\r\n        uiConfig={uiConfig}\r\n        firebaseAuth={FirebaseApp.auth()}\r\n      />\r\n    </Dialog>\r\n  );\r\n}\r\n","import {\r\n  AppBar,\r\n  Avatar,\r\n  Badge,\r\n  IconButton,\r\n  makeStyles,\r\n  Menu,\r\n  MenuItem,\r\n  TableBody,\r\n  TableCell,\r\n  TableRow,\r\n  SwipeableDrawer,\r\n  Table,\r\n  Toolbar,\r\n  colors,\r\n} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport SignInCard from \"./SignInCard\";\r\nimport {\r\n  AccountCircle,\r\n  ExitToApp,\r\n  Message,\r\n  More,\r\n  MoreVert,\r\n  Notifications,\r\n} from \"@material-ui/icons\";\r\nimport FirebaseApp from \"../FirebaseApp\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  sectionDesktop: {\r\n    display: \"none\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"flex\",\r\n    },\r\n  },\r\n  sectionMobile: {\r\n    display: \"flex\",\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      display: \"none\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function HomeAppBar(props) {\r\n  const user = FirebaseApp.auth().currentUser;\r\n  const [messageCount, setMessageCount] = React.useState(0);\r\n  const [notificationCount, setNotificationCoutn] = React.useState(0);\r\n  const [loginPage, setLoginPage] = React.useState(false);\r\n  const toggleLoginPage = () => {\r\n    setLoginPage(true);\r\n  };\r\n  const handleLoginPageClose = () => {\r\n    setLoginPage(false);\r\n  };\r\n  const [drawerState, setDrawerState] = React.useState(false);\r\n\r\n  const toggleDrawer = (open) => (event) => {\r\n    if (\r\n      event &&\r\n      event.type === \"keydown\" &&\r\n      (event.key === \"Tab\" || event.key === \"Shift\")\r\n    ) {\r\n      return;\r\n    }\r\n    setDrawerState(open);\r\n  };\r\n  const classes = useStyles();\r\n  const [userMenuAnchor, setUserMenuAnchor] = React.useState(null);\r\n  const isUserMenuOpen = Boolean(userMenuAnchor);\r\n  const userMenuId = \"user-menu\";\r\n  const handleUserMenuOpen = (event) => {\r\n    setUserMenuAnchor(event.currentTarget);\r\n  };\r\n  const handleUserMenuClose = () => {\r\n    setUserMenuAnchor(null);\r\n  };\r\n  const userMenu = (\r\n    <>\r\n      {user != null && (\r\n        <Menu\r\n          id={userMenuId}\r\n          anchorEl={userMenuAnchor}\r\n          anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n          keepMounted\r\n          transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n          open={isUserMenuOpen}\r\n          onClose={handleUserMenuClose}\r\n        >\r\n          <Table>\r\n            <TableBody>\r\n              <MenuItem onClick={handleUserMenuClose}>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <Avatar src={user.photoURL} />\r\n                  </TableCell>\r\n                  <TableCell>{user.displayName}</TableCell>\r\n                </TableRow>\r\n              </MenuItem>\r\n              <MenuItem onClick={handleUserMenuClose}>\r\n                <TableRow>\r\n                  <TableCell>\r\n                    <Avatar color={colors.white}>\r\n                      <ExitToApp />\r\n                    </Avatar>\r\n                  </TableCell>\r\n                  <TableCell> Log Out</TableCell>\r\n                </TableRow>\r\n              </MenuItem>\r\n            </TableBody>\r\n          </Table>\r\n        </Menu>\r\n      )}\r\n    </>\r\n  );\r\n  const mobileMenu = (\r\n    <>\r\n      <Menu>\r\n        {user == null && <MenuItem>Sign In</MenuItem>}\r\n        {user != null && (\r\n          <div>\r\n            <MenuItem>\r\n              <IconButton>\r\n                <Badge badgeContent={messageCount}>\r\n                  <Message />\r\n                </Badge>\r\n              </IconButton>\r\n              Messages\r\n            </MenuItem>\r\n            <MenuItem>\r\n              <IconButton>\r\n                <Badge badgeContent={notificationCount}>\r\n                  <Notifications />\r\n                </Badge>\r\n              </IconButton>\r\n              Notifications\r\n            </MenuItem>\r\n            <MenuItem>\r\n              <IconButton\r\n                edge=\"end\"\r\n                aria-label=\"account of current user\"\r\n                aria-controls={userMenuId}\r\n                aria-haspopup=\"true\"\r\n                color=\"inherit\"\r\n                onClick={handleUserMenuOpen}\r\n              >\r\n                <Avatar src={user.photoURL} />\r\n              </IconButton>\r\n              My Profile\r\n            </MenuItem>\r\n          </div>\r\n        )}\r\n      </Menu>\r\n    </>\r\n  );\r\n  return (\r\n    <div>\r\n      <AppBar position={\"fixed\"} className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton onClick={toggleDrawer(true)}>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <div className={classes.grow} />\r\n\r\n          {user == null && (\r\n            <div className={classes.sectionDesktop}>\r\n              <IconButton onClick={toggleLoginPage}>\r\n                <AccountCircle />\r\n              </IconButton>\r\n            </div>\r\n          )}\r\n          {user != null && (\r\n            <div className={classes.sectionDesktop}>\r\n              <IconButton>\r\n                <Badge badgeContent={messageCount}>\r\n                  <Message />\r\n                </Badge>\r\n              </IconButton>\r\n              <IconButton>\r\n                <Badge badgeContent={notificationCount}>\r\n                  <Notifications />\r\n                </Badge>\r\n              </IconButton>\r\n              <IconButton\r\n                edge=\"end\"\r\n                aria-label=\"account of current user\"\r\n                aria-controls={userMenuId}\r\n                aria-haspopup=\"true\"\r\n                color=\"inherit\"\r\n                onClick={handleUserMenuOpen}\r\n              >\r\n                <Avatar src={user.photoURL} />\r\n              </IconButton>\r\n            </div>\r\n          )}\r\n\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton>\r\n              <MoreVert />\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {userMenu}\r\n      <SignInCard open={loginPage} onClose={handleLoginPageClose} />\r\n      <SwipeableDrawer\r\n        anchor={\"left\"}\r\n        open={drawerState}\r\n        onClose={toggleDrawer(false)}\r\n        onOpen={toggleDrawer(true)}\r\n      >\r\n        <div>Meghanath</div>\r\n      </SwipeableDrawer>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport HomeAppBar from \"../components/HomeAppBar\";\r\nimport FirebaseApp from \"../FirebaseApp\";\r\n\r\nclass Home extends React.Component {\r\n  state = {\r\n    user: FirebaseApp.auth().currentUser,\r\n  };\r\n  componentDidMount = () => {\r\n    FirebaseApp.auth().onAuthStateChanged((userAuth) => {\r\n      this.setState({ user: userAuth });\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <HomeAppBar />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Home from \"./pages/Home\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Home />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}